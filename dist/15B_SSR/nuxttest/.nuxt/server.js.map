{"version":3,"sources":["../../../../15B_SSR/nuxttest/.nuxt/server.js"],"names":["debug","require","color","isDev","noopApp","render","h","createNext","ssrContext","redirected","opts","res","nuxt","serverRendered","query","path","indexOf","url","writeHead","status","end","next","beforeRenderFns","layout","data","error","state","app","router","store","_app","meta","$meta","asyncData","beforeRender","Promise","all","map","fn","Components","nuxtState","renderErrorPage","errLayout","context","loadLayout","setLayout","render404Page","statusCode","message","s","Date","now","match","_actions","nuxtServerInit","dispatch","midd","name","length","options","layoutName","middleware","concat","forEach","Component","isValid","validate","params","route","_generate","promises","promise","then","cid","asyncDataResult","push","fetch","asyncDatas","r"],"mappings":"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","file":"server.js","sourcesContent":["import Vue from 'vue'\nimport clone from 'clone'\nimport { stringify } from 'querystring'\nimport { omit } from 'lodash'\nimport middleware from './middleware'\nimport { createApp, NuxtError } from './index'\nimport { applyAsyncData, sanitizeComponent, getMatchedComponents, getContext, middlewareSeries, promisify, urlJoin } from './utils'\n\nconst debug = require('debug')('nuxt:render')\ndebug.color = 4 // force blue color\n\nconst isDev = true\n\nconst noopApp = () => new Vue({ render: (h) => h('div') })\n\nconst createNext = ssrContext => opts => {\n  ssrContext.redirected = opts\n  // If nuxt generate\n  if (!ssrContext.res) {\n    ssrContext.nuxt.serverRendered = false\n    return\n  }\n  opts.query = stringify(opts.query)\n  opts.path = opts.path + (opts.query ? '?' + opts.query : '')\n  if (opts.path.indexOf('http') !== 0 && ('/' !== '/' && opts.path.indexOf('/') !== 0)) {\n    opts.path = urlJoin('/', opts.path)\n  }\n  // Avoid loop redirect\n  if (opts.path === ssrContext.url) {\n    ssrContext.redirected = false\n    return\n  }\n  ssrContext.res.writeHead(opts.status, {\n    'Location': opts.path\n  })\n  ssrContext.res.end()\n}\n\n// This exported function will be called by `bundleRenderer`.\n// This is where we perform data-prefetching to determine the\n// state of our application before actually rendering it.\n// Since data fetching is async, this function is expected to\n// return a Promise that resolves to the app instance.\nexport default async ssrContext => {\n  // Create ssrContext.next for simulate next() of beforeEach() when wanted to redirect\n  ssrContext.redirected = false\n  ssrContext.next = createNext(ssrContext)\n  // Used for beforeNuxtRender({ Components, nuxtState })\n  ssrContext.beforeRenderFns = []\n  // Nuxt object (window.__NUXT__)\n  ssrContext.nuxt = { layout: 'default', data: [], error: null, state: null, serverRendered: true }\n  // Create the app definition and the instance (created for each request)\n  const { app, router, store } = await createApp(ssrContext)\n  const _app = new Vue(app)\n\n  // Add meta infos (used in renderer.js)\n  ssrContext.meta = _app.$meta()\n  // Keep asyncData for each matched component in ssrContext (used in app/utils.js via this.$ssrContext)\n  ssrContext.asyncData = {}\n\n  const beforeRender = async () => {\n    // Call beforeNuxtRender() methods\n    await Promise.all(ssrContext.beforeRenderFns.map((fn) => promisify(fn, { Components, nuxtState: ssrContext.nuxt })))\n    \n    // Add the state from the vuex store\n    ssrContext.nuxt.state = store.state\n    \n  }\n  const renderErrorPage = async () => {\n    // Load layout for error page\n    let errLayout = (typeof NuxtError.layout === 'function' ? NuxtError.layout(app.context) : NuxtError.layout)\n    ssrContext.nuxt.layout = errLayout || 'default'\n    await _app.loadLayout(errLayout)\n    _app.setLayout(errLayout)\n    await beforeRender()\n    return _app\n  }\n  const render404Page = () => {\n    app.context.error({ statusCode: 404, path: ssrContext.url, message: 'This page could not be found' })\n    return renderErrorPage()\n  }\n\n  const s = isDev && Date.now()\n\n  // Components are already resolved by setContext -> getRouteData (app/utils.js)\n  const Components = getMatchedComponents(router.match(ssrContext.url))\n\n  \n  /*\n  ** Dispatch store nuxtServerInit\n  */\n  if (store._actions && store._actions.nuxtServerInit) {\n    try {\n      await store.dispatch('nuxtServerInit', app.context)\n    } catch (err) {\n      debug('error occurred when calling nuxtServerInit: ', err.message)\n      throw err\n    }\n  }\n  // ...If there is a redirect or an error, stop the process\n  if (ssrContext.redirected) return noopApp()\n  if (ssrContext.nuxt.error) return renderErrorPage()\n  \n\n  /*\n  ** Call global middleware (nuxt.config.js)\n  */\n  let midd = []\n  midd = midd.map((name) => {\n    if (typeof name === 'function') return name\n    if (typeof middleware[name] !== 'function') {\n      app.context.error({ statusCode: 500, message: 'Unknown middleware ' + name })\n    }\n    return middleware[name]\n  })\n  await middlewareSeries(midd, app.context)\n  // ...If there is a redirect or an error, stop the process\n  if (ssrContext.redirected) return noopApp()\n  if (ssrContext.nuxt.error) return renderErrorPage()\n\n  /*\n  ** Set layout\n  */\n  let layout = Components.length ? Components[0].options.layout : NuxtError.layout\n  if (typeof layout === 'function') layout = layout(app.context)\n  await _app.loadLayout(layout)\n  layout = _app.setLayout(layout)\n  // ...Set layout to __NUXT__\n  ssrContext.nuxt.layout = _app.layoutName\n\n  /*\n  ** Call middleware (layout + pages)\n  */\n  midd = []\n  if (layout.middleware) midd = midd.concat(layout.middleware)\n  Components.forEach((Component) => {\n    if (Component.options.middleware) {\n      midd = midd.concat(Component.options.middleware)\n    }\n  })\n  midd = midd.map((name) => {\n    if (typeof name === 'function') return name\n    if (typeof middleware[name] !== 'function') {\n      app.context.error({ statusCode: 500, message: 'Unknown middleware ' + name })\n    }\n    return middleware[name]\n  })\n  await middlewareSeries(midd, app.context)\n  // ...If there is a redirect or an error, stop the process\n  if (ssrContext.redirected) return noopApp()\n  if (ssrContext.nuxt.error) return renderErrorPage()\n\n  /*\n  ** Call .validate()\n  */\n  let isValid = true\n  Components.forEach((Component) => {\n    if (!isValid) return\n    if (typeof Component.options.validate !== 'function') return\n    isValid = Component.options.validate({\n      params: app.context.route.params || {},\n      query: app.context.route.query  || {},\n      store\n    })\n  })\n  // ...If .validate() returned false\n  if (!isValid) {\n    // Don't server-render the page in generate mode\n    if (ssrContext._generate) ssrContext.nuxt.serverRendered = false\n    // Render a 404 error page\n    return render404Page()\n  }\n\n  // If no Components found, returns 404\n  if (!Components.length) return render404Page()\n\n  // Call asyncData & fetch hooks on components matched by the route.\n  let asyncDatas = await Promise.all(Components.map(Component => {\n    let promises = []\n\n    // Call asyncData(context)\n    if (Component.options.asyncData && typeof Component.options.asyncData === 'function') {\n      let promise = promisify(Component.options.asyncData, app.context)\n      promise.then(asyncDataResult => {\n        ssrContext.asyncData[Component.cid] = asyncDataResult\n        applyAsyncData(Component)\n        return asyncDataResult\n      })\n      promises.push(promise)\n    } else {\n      promises.push(null)\n    }\n\n    // Call fetch(context)\n    if (Component.options.fetch) {\n      promises.push(Component.options.fetch(app.context))\n    }\n    else {\n      promises.push(null)\n    }\n\n    return Promise.all(promises)\n  }))\n\n  if (asyncDatas.length) debug('Data fetching ' + ssrContext.url + ': ' + (Date.now() - s) + 'ms')\n\n  // datas are the first row of each\n  ssrContext.nuxt.data = asyncDatas.map(r => r[0] || {})\n\n  // ...If there is a redirect or an error, stop the process\n  if (ssrContext.redirected) return noopApp()\n  if (ssrContext.nuxt.error) return renderErrorPage()\n\n  // Call beforeNuxtRender methods & add store state\n  await beforeRender()\n\n  return _app\n}\n"]}