{"version":3,"sources":["../../../../15B_SSR/nuxttest/.nuxt/store.js"],"names":["use","files","require","context","filenames","keys","storeData","indexFilename","forEach","filename","indexOf","getModule","modules","name","replace","namePath","split","module","getModuleNamespace","pop","namespaced","createStore","Function","Store","Object","assign","strict","process","env","NODE_ENV","state","file","default","commit","Error","length","namespace","shift"],"mappings":"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","file":"store.js","sourcesContent":["import Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// Recursive find files in {srcDir}/{dir.store}\nconst files = require.context('@/store', true, /^\\.\\/(?!-)[^.]+\\.(js)$/)\nconst filenames = files.keys()\n\n// Store\nlet storeData = {}\n\n// Check if {dir.store}/index.js exists\nlet indexFilename\nfilenames.forEach((filename) => {\n  if (filename.indexOf('./index.') !== -1) {\n    indexFilename = filename\n  }\n})\nif (indexFilename) {\n  storeData = getModule(indexFilename)\n}\n\n// If store is not an exported method = modules store\nif (typeof storeData !== 'function') {\n\n  // Store modules\n  if (!storeData.modules) {\n    storeData.modules = {}\n  }\n\n  for (let filename of filenames) {\n    let name = filename.replace(/^\\.\\//, '').replace(/\\.(js)$/, '')\n    if (name === 'index') continue\n\n    let namePath = name.split(/\\//)\n    let module = getModuleNamespace(storeData, namePath)\n\n    name = namePath.pop()\n    module[name] = getModule(filename)\n    module[name].namespaced = true\n  }\n\n}\n\n// createStore\nexport const createStore = storeData instanceof Function ? storeData : () => {\n  return new Vuex.Store(Object.assign({\n    strict: (process.env.NODE_ENV !== 'production'),\n  }, storeData, {\n    state: storeData.state instanceof Function ? storeData.state() : {}\n  }))\n}\n\n// Dynamically require module\nfunction getModule (filename) {\n  const file = files(filename)\n  const module = file.default || file\n  if (module.commit) {\n    throw new Error('[nuxt] store/' + filename.replace('./', '') + ' should export a method which returns a Vuex instance.')\n  }\n  if (module.state && typeof module.state !== 'function') {\n    throw new Error('[nuxt] state should be a function in store/' + filename.replace('./', ''))\n  }\n  return module\n}\n\nfunction getModuleNamespace (storeData, namePath) {\n  if (namePath.length === 1) {\n    return storeData.modules\n  }\n  let namespace = namePath.shift()\n  storeData.modules[namespace] = storeData.modules[namespace] || {}\n  storeData.modules[namespace].namespaced = true\n  storeData.modules[namespace].modules = storeData.modules[namespace].modules || {}\n  return getModuleNamespace(storeData.modules[namespace], namePath)\n}\n"]}